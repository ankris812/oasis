{
  "name": "multiblob-http",
  "description": "serve content-addressed blobs over http",
  "version": "1.2.1",
  "homepage": "https://github.com/ssbc/multiblob-http",
  "repository": {
    "type": "git",
    "url": "git://github.com/ssbc/multiblob-http.git"
  },
  "files": [
    "*.js"
  ],
  "dependencies": {
    "pull-many": "^1.0.9",
    "pull-stream": "^3.6.14",
    "range-parser": "^1.2.1",
    "stream-to-pull-stream": "^1.7.3"
  },
  "devDependencies": {
    "bl": "^3.0.0",
    "hyperquest": "^2.1.3",
    "multiblob": "^1.13.7",
    "tape": "^5.3.1"
  },
  "engines": {
    "node": ">=12"
  },
  "author": "'Dominic Tarr' <dominic.tarr@gmail.com> (dominictarr.com)",
  "contributors": [
    "'Andre Staltz' <contact@staltz.com>"
  ],
  "license": "MIT",
  "scripts": {
    "test": "tape test/*.js",
    "test-verbose": "VERBOSE_TESTS=1 npm run test"
  },
  "readme": "# multiblob-http\n\nserve content-addressed blobs over http.\nsee use with [multiblob](https://github.com/ssbc/multiblob)\n\n# example\n\n``` js\nvar MultiBlob = require('multiblob')\nvar MultiBlobHttp = require('multiblob-http')\nvar http = require('http')\n\nvar dir = where_files_go //set this.\n\nvar blobs = MultiBlob(dir)\n\nhttp.createServer(MultiBlobHttp(blobs, '/blobs')).listen(8000)\n```\nthis will return an http handler (compatible with express middleware)\nthat will handle requests\n * `GET /blobs/get/{id}`\n * `POST /blobs/add` (which will respond with the hash)\n\nyou can also set a different prefix, but I use `/blobs`\n\n## http api\n\n### GET /get/{id}\n\nretrive blob with hash {id}\n\nrange requests [rfc 7233](https://tools.ietf.org/html/rfc7233) are supported,\nThis enables better video playback in browsers. Browsers tend to refuse to loop videos otherwise and seeking in videos requires range requests. It's also great for extracting embedded thumbnails from JPEGs etc.\n\n### POST /add\n\nposts to add do not require to have a hash, but will respond with the hash.\n(TODO: take a POST to /add/{id} and error if received content did not have that hash)\n\n## caching && headers\n\n`multiblobs-http` provides the correct headers to make serving content-addressed\nfiles as efficient as possible.\n\nFirst the the `etag` header is set to the hash and the expires header is set to a year in the future.\nIdeally, the browser shouldn't request this resource again for a whole year.\nProbably it might revalidate it when someone uses `ctrl-R` to reload the page.\nWhen it does, it will request with `if-none-modified` set to the hash.\nSince content-addressed files are _never_ modified, the server immediately responds\nwith 304 (not modified)\n\nthe `content-length` header is always used unless \"opts.size=false\".\nThis way, if a connection fails somehow,\nor there is an error later, the browser should detect it.\n\nOf course, it would be way better if browsers just understood content-hashes.\nBut, we have to play the hand we where delt, and\n`multiblob-http` makes the most of the broken web we live in.\n\n\n## License\n\nMIT\n\n\n\n"
}