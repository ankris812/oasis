{
  "name": "ssb-friends",
  "description": "Calculates the SSB social graph and provides APIs to query it",
  "version": "5.1.7",
  "author": "'Dominic Tarr' <dominic.tarr@gmail.com> (http://dominictarr.com)",
  "license": "MIT",
  "homepage": "https://github.com/ssbc/ssb-friends",
  "repository": {
    "type": "git",
    "url": "git://github.com/ssbc/ssb-friends.git"
  },
  "main": "index.js",
  "engines": {
    "node": ">=10"
  },
  "dependencies": {
    "bipf": "^1.5.1",
    "flumecodec": "0.0.1",
    "flumeview-reduce": "^1.3.17",
    "layered-graph": "^1.2.0",
    "pull-cont": "^0.1.1",
    "pull-flatmap": "0.0.1",
    "pull-level": "^2.0.4",
    "pull-notify": "^0.1.1",
    "pull-pushable": "^2.2.0",
    "pull-stream": "^3.6.0",
    "ssb-db2": ">=4.1.0 <=6",
    "ssb-ref": "^2.13.0"
  },
  "devDependencies": {
    "envelope-spec": "1.0.0",
    "mkdirp": "^1.0.4",
    "nyc": "^15.1.0",
    "promisify-tuple": "^1.2.0",
    "rimraf": "^3.0.2",
    "scuttle-testbot": "^1.6.0",
    "secret-stack": "^6.4.0",
    "ssb-caps": "^1.1.0",
    "ssb-db": "19",
    "ssb-db2": "^6.1.0",
    "ssb-generate": "^1.0.1",
    "ssb-keys": "^8.2.0",
    "ssb-tribes": "^0.4.1",
    "standard": "^16.0.2",
    "tap-arc": "^0.3.5",
    "tape": "^5.2.2"
  },
  "scripts": {
    "test": "tape test/*.js | tap-arc --bail",
    "lint": "standard --fix",
    "coverage": "nyc npm run test"
  },
  "readme": "# ssb-friends\n\n*Calculates the SSB social graph based on \"contact\" messages (such as follows\nand blocks), and provides APIs for you to query the social graph.*\n\nBased on [dynamic-dijkstra](https://github.com/dominictarr/dynamic-dijkstra)\nmodule, see its Readme for an in-depth discussion of the algorithm.\n\n## Installation\n\n**Prerequisites:**\n\n- Requires **Node.js 10** or higher\n- Requires **ssb-db** or **ssb-db2**\n\n```\nnpm install --save ssb-friends\n```\n\nAdd this secret-stack plugin like this:\n\n```diff\n const SecretStack = require('secret-stack')\n const caps = require('ssb-caps')\n\n const createSsbServer = SecretStack({ caps })\n     .use(require('ssb-master'))\n     .use(require('ssb-db'))\n+    .use(require('ssb-friends'))\n     .use(require('ssb-conn'))\n     // ...\n```\n\n## Usage\n\nIn ssb-friends, the relation between any two peers can be in 3 states, and each\nof those states are expressed by the following numbers (read more in the \"Edge\nweights\" section below):\n\n- **Following:** zero or positive\n- **Blocking:** -1\n- **Not following and not blocking:** -2\n\nThere are APIs for creating follows and blocks (which under the hood will just\npublish messages of type `\"contact\"` on the log), and the are APIs for checking\nwhether A follows or blocks B.\n\nThen, there are social graph APIs such as `hops` and `hopStream`, which\ncalculate \"social graph distances\" from you to other peers.\n\nAnd there are low-level social graph APIs such as `graph` and `graphStream`\nwhich just tell you the latest edges in the social graph, without calculating\ndistances.\n\n### `ssb.friends.follow(feedId, opts, cb)` (\"async\" muxrpc API)\n\nPublishes a contact message asserting your current following state for `feedId`.\n\n`opts` must be an object (or `null`) with these (optional) properties:\n\n- `state` *Boolean* - whether you are asserting (`true`) or undoing (`false`) a\nfollow. (Default: `true`)\n- `recps` *Array* - an array of feed IDs of recipients in case you want to\npublish this contact message privately to some feeds / groups (see e.g.\n`ssb-tribes`)\n\n### `ssb.friends.block(feedId, opts, cb)` (\"async\" muxrpc API)\n\nPublishes a contact message asserting your current blocking state for `feedId`.\n\n`opts` must be an object (or `null`) with these (optional) properties:\n\n- `state` *Boolean* - whether you are asserting (`true`) or undoing (`false`) a\nblock. (Default: `true`)\n- `reason` *String* - a description about why you're blocking (or unblocking)\nthis peer\n- `recps` *Array* - an array of feed IDs of recipients in case you want to\npublish this contact message privately to some feeds / groups (see e.g.\n`ssb-tribes`)\n\n### `ssb.friends.isFollowing(opts, cb)` (\"async\" muxrpc API)\n\nCalls back `true` if `opts.source` follows `opts.dest`, `false` otherwise, where\n`opts.source` and `opts.dest` are strings of SSB Feed IDs.\n\nIf you pass `opts.details = true`, then the callback will respond with the\nobject `{ response, private }`, where `response` is the boolean indicating\nthe follow relationship, and `private` is a boolean indicating that the\nrelationship was originally encoded in a private (encrypted) message.\n\n### `ssb.friends.isBlocking(opts, cb)` (\"async\" muxrpc API)\n\nCalls back `true` if `opts.source` blocks `opts.dest`, `false` otherwise, where\n`opts.source` and `opts.dest` are strings of SSB Feed IDs.\n\nIf you pass `opts.details = true`, then the callback will respond with the\nobject `{ response, private }`, where `response` is the boolean indicating\nthe block relationship, and `private` is a boolean indicating that the\nrelationship was originally encoded in a private (encrypted) message.\n\n### `ssb.friends.hops([opts,] cb)` (\"async\" muxrpc API)\n\nRetrieves the current hops state, which is an object of the shape\n\n```\n{\n  FeedId1: distance, // distance from you in hops\n  FeedId2: distance,\n  FeedId3: distance,\n}\n```\n\n(**Advanced**) `opts` is an optional object, which allows you to configure the\ncalculation of the hops distances with the following object fields:\n\n- `opts.start` *String* - feed ID of the \"central\" node where distance is zero.\n(Default: `sbot.id`)\n- `opts.max` *Number* - a max distance, where nodes beyond this distance are\nomitted from the output. If the max is equal to or less than the default\n(`config.friends.hops`), the output will be faster to calculate, because it will\njust copy the cached value, but skip nodes at a greater distance than max.\n(Default: `config.friends.hops` or 3)\n- `opts.reverse` *Boolean* - when `true`, the output is the hops distance **to*\n`opts.start`, instead of **from** `opts.start`. (Default: `false`)\n\n### `ssb.friends.hopStream([opts])` (\"source\" muxrpc API)\n\nReturn a stream of hops objects `{<id>:<dist>,...}`, where the first item is the\ncurrent state (such as what `ssb.friends.hops()` returns), and any following\nobjects are updates caused by someone in your network following, unfollowing or\nblocking someone.\n\nCan be configured via an `opts` argument, although arguably *less* configurable\nthan `ssb.friends.hops()` because it only supports the following fields:\n\n- `opts.old` *Boolean* - whether or not to include the current state (such as\nwhat `ssb.friends.hops()` returns). (Default: `false`)\n- `opts.live` *Boolean* - whether or not to include subsequent updates.\n(Default: `true`)\n\n### `ssb.friends.graph(cb)` (\"async\" muxrpc API)\n\nRetrieves the current state of the social graph, which is an object of the shape\n\n```\n{\n  FeedId1: {\n    FeedId2: value, // a weight for the edge FeedId1 => FeedId2\n  },\n  FeedId3: {\n    FeedId4: value,\n    FeedId5: value,\n  },\n}\n```\n\nThe `value` is a number, where its meaning is described at the top of this\nREADME.\n\n### `ssb.friends.graphStream([opts])` (\"source\" muxrpc API)\n\nReturns a stream of social graph objects, where each object has the same shape as the output of `ssb.friends.graph()`. The first object in the stream (only if `opts.old` is true) reflects the current state of the social graph, and subsequent objects (only if `opts.live` is true) represent just one updated edge, in the shape `{ FeedId1: { FeedId2: value } }`.\n\n- `opts.old` *Boolean* - whether or not to include the current state (such as\nwhat `ssb.friends.graph()` returns). (Default: `false`)\n- `opts.live` *Boolean* - whether or not to include subsequent updates of edges\nin the social graph.\n(Default: `true`)\n\n## Edge weights\n\nThis module is implemented in terms of [dynamic-dijkstra](https://github.com/dominictarr/dynamic-dijkstra)\n(via [layered-graph](https://github.com/ssbc/layered-graph)).\n\nRelations between feeds are represented as non-zero numbers, as follows:\n\nIn SSB we use `1` to represent a follow, `-1` to represent a block, `-2` to\nrepresent unfollow.\n\nA feed with distance `2` is a \"friend of a friend\" (we follow someone `+1`\nwho follows them `+1` which sums up as `2`). The distance `-2` can mean either\nblocked by a friend or unfollowed by us.\n\nIf a friend follows someone another friend blocks, the friends follow wins,\nbut if you block them directly, that block wins over the friend's follow.\n\n## License\n\nMIT\n"
}