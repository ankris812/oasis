{
  "name": "obz",
  "description": "simple and lightweight observer",
  "version": "1.1.0",
  "homepage": "https://github.com/ssbc/obz",
  "repository": {
    "type": "git",
    "url": "git://github.com/ssbc/obz.git"
  },
  "dependencies": {},
  "devDependencies": {
    "tape": "^4.6.0"
  },
  "author": "'Dominic Tarr' <dominic.tarr@gmail.com> (dominictarr.com)",
  "license": "MIT",
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "readme": "# obz\n\nA fork of https://github.com/dominictarr/obv\n\nRepresents a value changing in time.\n\nSometimes you have a sequence of values over time,\nusually we use streams for this. However, in some cases,\nthe latest value, or the next value matters more\nthan the entire history of values.\n\nFor example, if you are drawing the mouse pointer,\nyou just need the current position, not the historical positions.\n\nAn observable is a simple way to represent these instantaniously changing values.\n\n## Obv() => observable\n\nreturns an observable instance.\n\n## observable(listener=function, immediate=boolean) => remove\n\nregister `listener` with the observable. `immediate` is true by default.\n`listener` is called with the current value (if one has been set), set to false to disable.\n\nA function `remove` is returned, calling this function deregisters the listener.\n\nAnother way of deregistering the listener is by returning `false` from inside the\nlistener function.\n\n## observable.set(value=any)\n\nset the current value of this observable. Any registered listeners will be called.\n\n## observable.once(listener=function, immediate=boolean) => remove\n\nLike the above call to `observable()` except the listener will only be triggered _once_.\n\nThis is useful for representing variables which must be set after an async operation\n(say, initializing a database connection), but if the value is initalized\nyou can act on it immediately.\n\nIf you call `observable.once(listener, false)` that triggers at the _next_\ntime the value is set, which so far I have used to create live streams.\n\n## observable.value\n\nThe current value of the observable is provided as a property.\nI recommend not using null as a observable value in your program,\nbecause it makes testing the current value awkward.\n\n## License\n\nMIT\n\n"
}