{
  "name": "private-group-spec",
  "version": "1.2.0",
  "description": "a spec for private groups in scuttlebutt, using envelope encryption",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ssbc/private-groups-spec.git"
  },
  "keywords": [
    "scuttlebutt",
    "spec",
    "private",
    "groups",
    "encryption"
  ],
  "author": "mixmix",
  "license": "LGPL-3.0-only",
  "bugs": {
    "url": "https://github.com/ssbc/private-groups-spec/issues"
  },
  "homepage": "https://github.com/ssbc/private-groups-spec#readme",
  "dependencies": {
    "is-my-ssb-valid": "^1.2.0"
  },
  "devDependencies": {
    "ssb-private-group-keys": "^1.0.0",
    "tap-arc": "^0.3.4",
    "tape": "^5.5.3"
  },
  "scripts": {
    "test": "node test.js && tape test/*.test.js | tap-arc --bail"
  },
  "readme": "# Private-Groups Spec | v1.0.0\n\nA specification for implementing private groups in scuttlebutt.\n\nThe fundamentals of this spec are:\n\n1. uses _envelope_ for encryption of content\n2. has group_ids which are safe to share publicly\n3. adding people to the group is done with group's knowledge\n4. supports disclosing of message content\n    - **but this leaks info about the group** (peak at other messages / authors)\n\n## envelope encryption in scuttlebutt\n\nIn adition to the envelope-spec, there are some scuttlebutt-specific specifications\n\n[See spec here](./encryption/README.md)\n\n\n## recipient key derivation\n\nbox1 took feedIds from the `content.recps` field and directly used these for encryption.\n\nIn envelope, we instead take \"ids\" from `content.recps`, and map each to a key+scheme pair `{ key, scheme }` where\":\n- `key` is the encryption key which will be used in a `key_slot`, and \n- `scheme` is the \"key management scheme\" which that key is employing\n\nType of id            | How `key` is derived                               | `scheme`\n----------------------|----------------------------------------------------|-----------------------------------------\nprivate group id      | [a key-store](./group/group-id/README.md)          | \"envelope-large-symmetric-group\"\nfeedId (someone else) | [diff-hellman styles](./direct-messages/README.md) | \"envelope-id-based-dm-converted-ed25519\"\nfeedId (yours)        | [locally stored key](./direct-messages/README.md)  | \"envelope-symmetric-key-for-self\"\nP.O. Box id           | [diffie-hellman styles](./po-box/README.md)        | \"envelope-id-based-pobox-curve25519\"\n\nsee `key-schemes.json` for the canonical list of accepted schema labels\n\n### recipient restrictions\n\nWe talk about `key_slots` or recipients / `recps` a little interchangeably.\nLet's assume `content.recps` are mapped to `key_slots` preserving their order.\n\n:warning: The following restrictions must be followed :\n\n1. there are max 16 slots on a message\n2. if there is a group key\n    - a) there is only 1 group key\n    - b) the group key is in the first key_slot\n3. we disallow you from making a shared DM key with yourself\n\nMore detail:\n- (1) means all implementations know to look 16 slots deep when trying to unbox the msg_key\n- (2.a) provides a guarentee that infomation is not leaked across groups, in particular tangle info would leak info about group memember as these ids are not cloaked in this version\n- (2.a + 2.b) means we that we only need to try group keys in the first slot. If that fails, we can try DM keys on slots 1-16. (nice and fast!)\n- (3) is a tight restriction which we think will help people write better apps\n    - it's a step towards forward security\n    - if you want to send to self, it encourages people to mint a group, which is a better practice when moving to support multi-device identities\n    - _we may relax this restriction when we have more experience_\n\n## group management\n\nA minimal amount of agreement to make coordination easier:\n- [creating a new group](./group/init/README.md)\n- [adding someone to your group](./group/add-member/README.md)\n\n\n---\n\n## TODO\n\ndescribe\n- how all these things might be woven together\n- where state is tracked off-chain (in a key-store)\n\n\n## scuttlebutt private-groups spec (v2)\n\nCould modify this spec:\n1. - same\n2. - same\n3. - same\n4. supports privacy fiendly disclosing of message content\n    - all internal cypherlinks are \"cloaked\"\n\n"
}