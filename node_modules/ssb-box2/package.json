{
  "name": "ssb-box2",
  "description": "'Envelope' SSB encryption format, for ssb-db2",
  "version": "3.0.1",
  "homepage": "https://github.com/ssbc/ssb-box2",
  "repository": {
    "type": "git",
    "url": "git@github.com:ssbc/ssb-box2.git"
  },
  "main": "index.js",
  "files": [
    "*.js",
    "package.json.license",
    "LICENSES/*"
  ],
  "dependencies": {
    "envelope-js": "^1.3.0",
    "private-group-spec": "^1.2.0",
    "ssb-bfe": "^3.7.0",
    "ssb-keyring": "^2.2.0",
    "ssb-private-group-keys": "^0.4.1",
    "ssb-ref": "^2.16.0",
    "ssb-uri2": "^2.4.0"
  },
  "devDependencies": {
    "c8": "^7.11.0",
    "husky": "^4.3.0",
    "mkdirp": "^1.0.4",
    "prettier": "^2.6.2",
    "pretty-quick": "^3.1.3",
    "pull-stream": "^3.6.14",
    "rimraf": "^3.0.2",
    "secret-stack": "6.3.2",
    "ssb-backlinks": "^2.1.1",
    "ssb-buttwoo": "^0.3.0",
    "ssb-caps": "1.1.0",
    "ssb-classic": "^1.0.3",
    "ssb-db": "^20.4.0",
    "ssb-db2": "^6.2.0",
    "ssb-encryption-format": "^2.2.0",
    "ssb-keys": "^8.4.0",
    "ssb-query": "^2.4.5",
    "ssb-tribes": "^2.7.4",
    "tap-arc": "^0.3.4",
    "tape": "^5.2.2"
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run format-code-staged"
    }
  },
  "author": "Anders Rune Jensen <arj03@protonmail.ch>",
  "contributors": [
    "Andre Staltz <contact@staltz.com>"
  ],
  "license": "LGPL-3.0-only",
  "scripts": {
    "format-code": "prettier --write \"*.js\" \"test/*.js\"",
    "format-code-staged": "pretty-quick --staged --pattern \"*.js\" --pattern \"(test)/*.js\"",
    "test": "tape test/*.js | tap-arc --bail",
    "coverage": "c8 --reporter=lcov npm run test"
  },
  "readme": "<!--\nSPDX-FileCopyrightText: 2021 Anders Rune Jensen\n\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# ssb-box2\n\nA module for encrypting and decrypting messages with box2 in [SSB DB2]. Messages\ncreated using this module are compatible with [ssb-tribes].\n\nYou can use this module as an ssb-db2 plugin, or you can use it as a standalone\ntool to encrypt and decrypt messages.\n\n## Installation\n\n- Requires **Node.js 12** or higher\n\n```bash\nnpm install ssb-box2\n```\n\n## Usage in ssb-db2\n\n- Requires `secret-stack@^6.2.0`\n- Requires `ssb-db2@>=5.0.0`\n\nThe example below shows how to encrypt a message to yourself using box2.\n\n```js\nconst SecretStack = require('secret-stack')\nconst caps = require('ssb-caps')\nconst ssbKeys = require('ssb-keys')\n\nconst keys = ssbKeys.loadOrCreateSync(path.join(dir, 'secret'))\n\nconst sbot = SecretStack({ caps })\n  .use(require('ssb-db2'))\n  .use(require('ssb-box2')) // <-- ADD THIS AS A PLUGIN\n  .call(null, { path: './', keys })\n\nconst testkey = Buffer.from(\n  '30720d8f9cbf37f6d7062826f6decac93e308060a8aaaa77e6a4747f40ee1a76',\n  'hex'\n)\n\nsbot.box2.setOwnDMKey(testkey)\n\nsbot.db.create(\n  {\n    content: { type: 'post', text: 'super secret', recps: [keys.id] }\n    encryptionFormat: 'box2'\n  },\n  (err, privateMsg) => {\n    // privateMsg is now encrypted using box2\n  }\n)\n```\n\n### Methods\n\nAdding this module as a secret-stack plugin means that you can use these methods\non the `sbot.box2` namespace:\n\n- `setOwnDMKey(key)`: Adds a `key` (a buffer) to the list of keys that can be\n  used to encrypt messages to yourself. By specifying the direct message (DM)\n  for yourself, you are free to supply that from any source. The key you provide\n  _will_ be persisted locally. For direct messaging other feeds, a key is\n  automatically derived.\n- `addGroupInfo(groupId, groupInfo)`: `groupId` must be a string and `groupInfo` must be an object. `groupInfo` can have these keys:\n  - `key` must be a buffer. The key can then be used as a \"recp\" to encrypt messages to the group. Note that the keys are not persisted in this module.\n  - `scheme` _String_ - scheme of that encryption key (optional, there is only one option at the moment which we default to)\n  - `root` _MessageId_ the id of the `group/init` message\n- `listGroupIds(cb) => [groupIds]`: Lists all groupIds whose messages you're able to decrypt. Returns a promise if cb isn't provided.\n- `getGroupKeyInfo(id, cb) => { key, scheme }`: Gets the key and scheme for a group. Returns a promise if cb isn't provided.\n\n## Usage as a standalone\n\nThis module conforms with [ssb-encryption-format](https://github.com/ssbc/ssb-encryption-format)\nso with ssb-box2 you can use all the methods specified by ssb-encryption-format.\n\n```js\nconst ssbKeys = require('ssb-keys')\nconst Box2Format = require('ssb-box2/format')\n\nconst keys = ssbKeys.generate('ed25519', 'alice')\nconst box2Format = Box2Format()\n\nbox2Format.setup({ keys }, () => {\n  box2Format.setOwnDMKey(Buffer.alloc(32, 'abc'))\n  const opts = { recps: [keys.id], keys, previous: null, author: keys.id }\n\n  const plaintext = Buffer.from('hello')\n  console.log(plaintext)\n  // <Buffer 68 65 6c 6c 6f>\n\n  const ciphertext = box2Format.encrypt(plaintext, opts)\n\n  const decrypted = box2Format.decrypt(ciphertext, opts)\n  console.log(decrypted)\n  // <Buffer 68 65 6c 6c 6f>\n})\n```\n\n[ssb db2]: https://github.com/ssb-ngi-pointer/ssb-db2/\n[ssb-tribes]: https://github.com/ssbc/ssb-tribes/\n[ssb-keyring]: https://gitlab.com/ahau/lib/ssb-keyring/\n"
}