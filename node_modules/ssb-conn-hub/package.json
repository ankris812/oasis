{
  "name": "ssb-conn-hub",
  "description": "Module that manages active connections to SSB peers",
  "version": "1.2.1",
  "homepage": "https://github.com/staltz/ssb-conn-hub",
  "main": "lib/index.js",
  "types": "lib/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git://github.com/staltz/ssb-conn-hub.git"
  },
  "dependencies": {
    "debug": "^4.3.1",
    "ip": "^1.1.5",
    "multiserver": "^3.7.0",
    "multiserver-address": "~1.0.1",
    "promisify-tuple": "^1.0.1",
    "pull-cat": "~1.1.11",
    "pull-notify": "~0.1.1",
    "pull-stream": "^3.6.14",
    "ssb-ref": "^2.14.3"
  },
  "devDependencies": {
    "@types/node": "12.x",
    "secret-stack": "6.4.0",
    "ssb-caps": "~1.1.0",
    "ssb-keys": "~8.1.0",
    "tap-bail": "^1.0.0",
    "tap-spec": "^5.0.0",
    "tape": "^5.2.2",
    "typescript": "~4.2.4"
  },
  "author": "Andre Staltz <contact@staltz.com> (http://staltz.com)",
  "license": "MIT",
  "scripts": {
    "typescript": "tsc",
    "tape": "tape test/*.js | tap-bail | tap-spec",
    "test": "npm run typescript && npm run tape"
  },
  "readme": "# ssb-conn-hub\n\nModule that manages active connections to peers. For use with the [SSB CONN](https://github.com/staltz/ssb-conn) family of modules.\n\n*Visual metaphor: a network switch managing connections to other peers, capable of starting or stopping connections.*\n\n![hub.png](./hub.png)\n\n## Usage\n\n**Prerequisites:**\n\n- Requires **Node.js 6.5** or higher\n- Requires `secret-stack@^6.3.0`\n\nThis module is only used to create an SSB CONN plugin, not used directly by applications. A ConnHub instance should be available on the CONN plugin, with the following API:\n\n## API\n\n* `connHub.connect(address, data?)`: connect to a peer known by its `address` (string, must conform to the [multiserver address convention](https://github.com/dominictarr/multiserver-address)). The second argument `data` is optional, and allows you to attach additional metadata, that can be read later when this connection data is retrieved. Returns a Promise, with the three possible outcomes:\n  - Resolves with an RPC object that represents the successfully connected peer\n  - Resolves with `false` when the connect was unnecessary, therefore not performed\n  - Rejects with an error indicating why the connection failed\n* `connHub.disconnect(address)`: disconnect from a peer known by its `address` (string, must conform to the multiserver address convention). Returns a Promise, with the three possible outcomes:\n  - Resolves with `true` when disconnected successfully\n  - Resolves with `false` when the disconnect was unnecessary, therefore not performed\n  - Rejects with an error indicating why the disconnection failed\n* `connHub.update(address, data)`: update the metadata of a peer currently in connection with us, where the peer is known by its `address` and the new data is in `data`. If the peer is not registered in ConnHub, this method performs no operations and returns false. Returns true if the update has succeeded.\n* `connHub.reset()`: closes all connections, basically resetting this instance as if it had just been started\n* `connHub.entries()`: returns a new `Iterator` object that gives `[address, data]` pairs, where data has the state and key of the peer\n* `connHub.liveEntries()`: returns a pull-stream that emits an array of entries (like `connHub.entries()`, but an array instead of an `Iterator`) everytime there are updates to connections.\n* `connDB.listen()`: returns a pull stream that notifies of connection events, as an object `{type, address, key, details}` where:\n  - `type` is either `'connecting'`, `'connecting-failed'`, `'connected'`, `'disconnecting'`, `'disconnecting-failed'`, `'disconnected'`\n  - `address` is the original address used for connecting\n  - (maybe present) `key` is the cryptographic public id\n  - (maybe present, see below) `details` is an object with additional info\n    - **Present when** when `type === 'connected'` and contains `details.rpc` (the MuxRPC object for the remote peer) and `details.isClient` (boolean indicating whether **we** are the client)\n    - Does not exist when `type === 'disconnecting'`\n    - Does not exist when `type === 'disconnected'`\n    - Does not exist when `type === 'connecting'`\n    - **Present when** `type === 'connecting-failed'` and `details` is the error object for the connection failure\n    - **Present when** `type === 'disconnecting-failed'` and `details` is the error object for the connection failure\n* `connHub.getState(address)`: returns undefined if the peer for that address is disconnected, otherwise returns one of `'connecting'`, `'connected'`, or `'disconnecting'`\n* `connHub.close()`: terminates any used resources and listeners, in preparation to destroy this instance.\n\n## Recipes\n\n**How can I get the RPC object for the remote peer connected with me?**\n\nAssuming you're access ConnHub from ssb-conn, listen to connection events on ConnHub, `filter` for `'connected'` events, and they should contain the RPC object on the event's `details` field:\n\n```js\npull(\n  ssb.conn.hub().listen(),\n  pull.filter(event => event.type === 'connected'),\n  pull.drain(event => {\n    const rpc = event.details.rpc\n    // `rpc` object has public methods such as `rpc.createHistoryStream()`\n  })\n)\n```\n\n## License\n\nMIT\n"
}