import { Msg, MsgId } from 'ssb-typescript';
export declare type Thread = {
    messages: Array<Msg>;
    full: boolean;
};
export declare type ThreadSummary = {
    root: Msg;
    replyCount: number;
    /**
     * Timestamp of the latest post in this thread
     */
    timestamp: number;
};
export declare type FilterOpts = {
    allowlist?: Array<string>;
    blocklist?: Array<string>;
    following?: boolean;
};
export declare type Opts = {
    reverse?: boolean;
    threadMaxSize?: number;
} & FilterOpts;
export declare type HashtagOpts = {
    reverse?: boolean;
    hashtag: string;
    hashtags?: Array<string>;
    threadMaxSize?: number;
} & FilterOpts;
export declare type UpdatesOpts = {
    includeSelf?: boolean;
} & FilterOpts;
export declare type HashtagUpdatesOpts = ({
    hashtag: string;
    hashtags: undefined;
} & FilterOpts) | ({
    hashtag: undefined;
    hashtags: Array<string>;
} & FilterOpts);
export declare type ThreadOpts = {
    root: MsgId;
    private?: boolean;
    threadMaxSize?: number;
} & FilterOpts;
export declare type ThreadUpdatesOpts = {
    root: MsgId;
    private?: boolean;
} & FilterOpts;
export declare type ProfileOpts = Opts & {
    id: string;
};
export declare type HashtagsMatchingOpts = {
    query: string;
    limit?: number;
};
export declare type RecentHashtagsOpts = {
    limit: number;
    preserveCase?: boolean;
};
