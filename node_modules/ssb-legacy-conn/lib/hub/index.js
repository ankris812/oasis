"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const run = require("promisify-tuple");
const ping = require('pull-ping');
const pull = require('pull-stream');
const Notify = require('pull-notify');
const msAddress = require('multiserver-address');
const ref = require('ssb-ref');
function isConnectingOrConnected(peer) {
    return peer.state === 'connecting' || peer.state === 'connected';
}
function isDhtAddress(addr) {
    return addr.substr(0, 4) === 'dht:';
}
function getKeyFromDhtAddress(addr) {
    const [transport] = addr.split('~');
    const [dhtTag, , remoteId] = transport.split(':');
    if (dhtTag !== 'dht')
        throw new Error('Invalid DHT address ' + addr);
    const key = remoteId[0] === '@' ? remoteId : '@' + remoteId;
    return key;
}
const defaultOpts = {
    pingTimeout: 5 * 6e4,
};
class ConnHub {
    constructor(server, opts = defaultOpts) {
        this._server = server;
        this._pingTimeout = opts.pingTimeout || defaultOpts.pingTimeout;
        this._connectRetries = new Set();
        this._peers = new Map();
        this._notify = Notify();
        this._init();
    }
    _init() {
        this._server.on('rpc:connect', this._onRpcConnect.bind(this));
    }
    _setPeer(address, data) {
        const previousData = this._peers.get(address);
        if (previousData) {
            Object.keys(data).forEach(key => {
                const k = key;
                if (typeof data[k] === 'undefined')
                    delete data[k];
            });
            this._peers.set(address, Object.assign({}, previousData, data));
        }
        else if (!data.state && !this._peers.has(address)) {
        }
        else {
            this._peers.set(address, data);
        }
    }
    _getPeerByKey(key) {
        for (let [address, data] of this._peers.entries()) {
            if (data.key === key)
                return [address, data];
        }
        return undefined;
    }
    _setupPing(address, rpc, key) {
        const pp = ping({ serve: true, timeout: this._pingTimeout }, () => { });
        this._notify({ type: 'ping', address, key, details: pp });
        pull(pp, rpc.gossip.ping({ timeout: this._pingTimeout }, (err) => {
            this._notify({
                type: 'ping-failed',
                address,
                key,
                details: err,
            });
        }), pp);
    }
    _onRpcConnect(rpc, isClient) {
        if (!this._server.ready() && rpc.id !== this._server.id)
            return rpc.close();
        if (rpc.id === this._server.id)
            return;
        const peer = this._getPeerByKey(rpc.id);
        if (!peer) {
            rpc._connectRetries = rpc._connectRetries || 0;
            if (isClient && rpc._connectRetries < 4) {
                setTimeout(() => {
                    this._onRpcConnect(rpc, isClient);
                }, 200);
                rpc._connectRetries += 1;
            }
            else {
            }
            return;
        }
        const [address, data] = peer;
        const key = data.key;
        const state = 'connected';
        const disconnect = cb => rpc.close(true, cb);
        this._setPeer(address, { state, key, disconnect });
        this._notify({ type: state, address, key, details: rpc });
        if (isClient)
            this._setupPing(address, rpc, key);
        rpc.on('closed', () => {
            this._peers.delete(address);
            this._notify({ type: 'disconnected', address, key });
        });
    }
    _inferPublicKey(address) {
        if (isDhtAddress(address)) {
            return getKeyFromDhtAddress(address);
        }
        else {
            return ref.getKeyFromAddress(address);
        }
    }
    connect(address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!msAddress.check(address)) {
                throw new Error('The given address is not a valid multiserver-address');
            }
            if (this._peers.has(address)) {
                const peer = this._peers.get(address);
                if (isConnectingOrConnected(peer)) {
                    return false;
                }
                else if (peer.state === 'disconnecting') {
                    this._connectRetries.add(address);
                    return false;
                }
                else {
                }
            }
            const state = 'connecting';
            const key = this._inferPublicKey(address);
            this._setPeer(address, { state, key });
            this._notify({ type: state, address, key });
            const [err, rpc] = yield run(this._server.connect)(address);
            if (err) {
                this._peers.delete(address);
                this._notify({
                    type: 'connecting-failed',
                    address,
                    key,
                    details: err,
                });
                throw err;
            }
            const peer = this._peers.get(address);
            if (!peer || peer.state !== 'connected') {
                const state = 'connected';
                this._setPeer(address, { state, key });
                this._notify({ type: state, address, key, details: rpc });
            }
            return rpc;
        });
    }
    disconnect(address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!msAddress.check(address)) {
                throw new Error('The given address is not a valid multiserver-address');
            }
            if (!this._peers.has(address))
                return false;
            const peer = this._peers.get(address);
            const key = this._inferPublicKey(address);
            if (peer.state !== 'disconnecting') {
                const state = 'disconnecting';
                this._setPeer(address, { state, key });
                this._notify({ type: state, address, key });
            }
            if (peer.disconnect) {
                const [err] = yield run(peer.disconnect)();
                if (err) {
                    this._notify({
                        type: 'disconnecting-failed',
                        address,
                        key,
                        details: err,
                    });
                    throw err;
                }
            }
            this._peers.delete(address);
            this._notify({ type: 'disconnected', address, key });
            if (this._connectRetries.has(address)) {
                this._connectRetries.delete(address);
                this.connect(address);
            }
            return true;
        });
    }
    reset() {
        for (var id in this._server.peers) {
            if (id !== this._server.id) {
                for (let peer of this._server.peers[id]) {
                    peer.close(true);
                }
            }
        }
    }
    entries() {
        return this._peers.entries();
    }
    getState(address) {
        if (!msAddress.check(address)) {
            throw new Error('The given address is not a valid multiserver-address');
        }
        if (!this._peers.has(address))
            return undefined;
        return this._peers.get(address).state;
    }
    listen() {
        return this._notify.listen();
    }
}
module.exports = ConnHub;
