"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var Time = require("./queries/time");
var Health = require("./queries/health");
var Sorting = require("./queries/sorting");
var ConnQuery = (function () {
    function ConnQuery(db, hub, staging) {
        this.db = db;
        this.hub = hub;
        this.staging = staging;
    }
    ConnQuery.prototype._hubEntryToPeer = function (_a) {
        var _b = __read(_a, 2), address = _b[0], hubData = _b[1];
        var stagingEntry = Array.from(this.staging.entries()).find(function (_a) {
            var _b = __read(_a, 1), addr = _b[0];
            return addr === address;
        });
        var peer = this.db.has(address)
            ? [address, __assign({ pool: 'db' }, this.db.get(address))]
            : !!stagingEntry
                ? [address, __assign({ pool: 'staging' }, stagingEntry[1])]
                : [address, __assign({ pool: 'hub' }, hubData)];
        if (hubData.key && !peer[1].key) {
            peer[1].key = hubData.key;
        }
        return peer;
    };
    ConnQuery.prototype.peersAll = function () {
        return this.peersConnectable('dbAndStaging').concat(this.peersInConnection());
    };
    ConnQuery.prototype.peersConnected = function () {
        var _this = this;
        return Array.from(this.hub.entries())
            .filter(function (_a) {
            var _b = __read(_a, 2), _address = _b[0], data = _b[1];
            return data.state === 'connected';
        })
            .map(function (e) { return _this._hubEntryToPeer(e); });
    };
    ConnQuery.prototype.peersConnecting = function () {
        var _this = this;
        return Array.from(this.hub.entries())
            .filter(function (_a) {
            var _b = __read(_a, 2), _address = _b[0], data = _b[1];
            return data.state === 'connecting';
        })
            .map(function (e) { return _this._hubEntryToPeer(e); });
    };
    ConnQuery.prototype.peersInConnection = function () {
        var _this = this;
        return Array.from(this.hub.entries())
            .filter(function (_a) {
            var _b = __read(_a, 2), _address = _b[0], data = _b[1];
            return data.state === 'connected' || data.state === 'connecting';
        })
            .map(function (e) { return _this._hubEntryToPeer(e); });
    };
    ConnQuery.prototype.peersConnectable = function (pool) {
        var _this = this;
        if (pool === void 0) { pool = 'db'; }
        var useDB = pool === 'db' || pool === 'dbAndStaging';
        var useStaging = pool === 'staging' || pool === 'dbAndStaging';
        var dbPool = useDB
            ? Array.from(this.db.entries()).map(function (_a) {
                var _b = __read(_a, 2), addr = _b[0], data = _b[1];
                return [
                    addr,
                    __assign({ pool: 'db' }, data),
                ];
            })
            : [];
        var stagingPool = useStaging
            ? Array.from(this.staging.entries()).map(function (_a) {
                var _b = __read(_a, 2), addr = _b[0], data = _b[1];
                return [
                    addr,
                    __assign({ pool: 'staging' }, data),
                ];
            })
            : [];
        return []
            .concat(dbPool)
            .concat(stagingPool)
            .filter(function (_a) {
            var _b = __read(_a, 1), address = _b[0];
            var state = _this.hub.getState(address);
            return state !== 'connected' && state !== 'connecting';
        });
    };
    ConnQuery.passesExpBackoff = Time.passesExpBackoff;
    ConnQuery.passesGroupDebounce = Time.passesGroupDebounce;
    ConnQuery.hasNoAttempts = Health.hasNoAttempts;
    ConnQuery.hasOnlyFailedAttempts = Health.hasOnlyFailedAttempts;
    ConnQuery.hasSuccessfulAttempts = Health.hasSuccessfulAttempts;
    ConnQuery.hasPinged = Health.hasPinged;
    ConnQuery.sortByStateChange = Sorting.sortByStateChange;
    return ConnQuery;
}());
module.exports = ConnQuery;
