import ConnDB = require('ssb-conn-db');
import ConnHub = require('ssb-conn-hub');
import ConnStaging = require('ssb-conn-staging');
import ConnQuery = require('ssb-conn-query');
import { AddressData } from 'ssb-conn-db/lib/types';
import { Callback } from './types';
export declare class CONN {
    private readonly ssb;
    private readonly config;
    private readonly db;
    private readonly hub;
    private readonly staging;
    private readonly connQuery;
    constructor(ssb: any, cfg: any);
    private initialize;
    private setupCloseHook;
    private maybeAutoStartScheduler;
    private startScheduler;
    private stopScheduler;
    private assertValidAddress;
    remember: (address: string, data?: any) => void;
    forget: (address: string) => void;
    dbPeers: () => Iterable<[string, AddressData]>;
    connect: (address: string, second: Record<string, any> | Callback<any> | null | undefined, third?: Callback<any> | undefined) => void;
    disconnect: (address: string, cb: Callback<any>) => void;
    peers: () => any;
    stage: (address: string, data?: Partial<Readonly<{
        [misc: string]: any;
        key?: string | undefined;
        type?: "bt" | "lan" | "internet" | undefined;
        stagingBirth: number;
        stagingUpdated: number;
    }>>) => boolean;
    unstage: (address: string) => boolean;
    stagedPeers: () => any;
    query: () => ConnQuery;
    start: () => Promise<void>;
    stop: () => void;
    ping: () => any;
    internalConnDB: () => ConnDB;
    internalConnHub: () => ConnHub;
    internalConnStaging: () => ConnStaging;
}
