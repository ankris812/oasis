"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pull = require('pull-stream');
const stats = require('statistics');
const ping = require('pull-ping');
function interpoolGlue(db, hub, staging) {
    function setupPing(address, rpc) {
        const PING_TIMEOUT = 5 * 6e4;
        const pp = ping({ serve: true, timeout: PING_TIMEOUT }, () => { });
        db.update(address, { ping: { rtt: pp.rtt, skew: pp.skew } });
        pull(pp, rpc.gossip.ping({ timeout: PING_TIMEOUT }, (err) => {
            if (err && err.name === 'TypeError') {
                db.update(address, (prev) => ({
                    ping: Object.assign({}, (prev.ping || {}), { fail: true }),
                }));
            }
        }), pp);
    }
    function onConnecting(ev) {
        staging.unstage(ev.address);
        db.update(ev.address, { stateChange: Date.now() });
    }
    function onConnectingFailed(ev) {
        db.update(ev.address, (prev) => ({
            failure: (prev.failure || 0) + 1,
            stateChange: Date.now(),
            duration: stats(prev.duration, 0),
        }));
    }
    function onConnected(ev) {
        staging.unstage(ev.address);
        db.update(ev.address, { stateChange: Date.now(), failure: 0 });
        if (ev.details.isClient)
            setupPing(ev.address, ev.details.rpc);
    }
    function onDisconnecting(ev) {
        db.update(ev.address, { stateChange: Date.now() });
    }
    function onDisconnectingFailed(ev) {
        db.update(ev.address, { stateChange: Date.now() });
    }
    function onDisconnected(ev) {
        db.update(ev.address, (prev) => ({
            stateChange: Date.now(),
            duration: stats(prev.duration, Date.now() - prev.stateChange),
        }));
    }
    pull(hub.listen(), pull.drain((ev) => {
        if (ev.type === 'connecting')
            onConnecting(ev);
        if (ev.type === 'connecting-failed')
            onConnectingFailed(ev);
        if (ev.type === 'connected')
            onConnected(ev);
        if (ev.type === 'disconnecting')
            onDisconnecting(ev);
        if (ev.type === 'disconnecting-failed')
            onDisconnectingFailed(ev);
        if (ev.type === 'disconnected')
            onDisconnected(ev);
    }));
}
exports.interpoolGlue = interpoolGlue;
