"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ref = require('ssb-ref');
function migrateOne(old) {
    if (!old)
        throw new Error('Cannot migrate undefined entry');
    if (!old.address) {
        try {
            old.address = ref.toMultiServerAddress(old);
        }
        catch (err) {
            throw new Error('Cannot migrate entry without field "address" ' +
                'or legacy {host,port,key}');
        }
    }
    var copy;
    try {
        copy = JSON.parse(JSON.stringify(old));
    }
    catch (err) {
        throw new Error('Cannot migrate entry that is not serializable');
    }
    var address = copy.address;
    delete copy.address;
    return [address, copy];
}
exports.migrateOne = migrateOne;
function migrateMany(olds) {
    if (!Array.isArray(olds))
        return {};
    return olds.reduce(function (obj, old) {
        try {
            var _a = __read(migrateOne(old), 2), address = _a[0], data = _a[1];
            obj[address] = data;
        }
        catch (err) {
            console.warn(err.message || err);
        }
        return obj;
    }, {});
}
exports.migrateMany = migrateMany;
