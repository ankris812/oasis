"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var fs = require("fs");
var path = require("path");
var os = require("os");
var migration_1 = require("./migration");
var AtomicFile = require('atomic-file');
var Notify = require('pull-notify');
var msAddress = require('multiserver-address');
var debug = require('debug')('ssb:conn-db');
var defaultOpts = {
    path: path.join(os.homedir(), '.ssb'),
    writeTimeout: 2000,
};
var ConnDB = (function () {
    function ConnDB(opts) {
        var _this = this;
        var dirPath = opts.path || defaultOpts.path;
        var modernPath = path.join(dirPath, 'conn.json');
        var legacyPath = path.join(dirPath, 'gossip.json');
        this._map = new Map();
        this._notify = Notify();
        this._stateFile = AtomicFile(modernPath);
        this._writeTimeout =
            typeof opts.writeTimeout === 'number'
                ? opts.writeTimeout
                : defaultOpts.writeTimeout;
        this._scheduledWriteTask = null;
        this._closed = false;
        this._loadedPromise = new Promise(function (resolve, reject) {
            _this._loadedResolve = resolve;
            _this._loadedReject = reject;
        });
        this._init(modernPath, legacyPath);
    }
    ConnDB.prototype._init = function (modernPath, legacyPath) {
        var _this = this;
        var modernExists = fs.existsSync(modernPath);
        var legacyExists = fs.existsSync(legacyPath);
        if (!modernExists && !legacyExists) {
            this._stateFile.set({}, function () { });
            this._loadedResolve(true);
            debug('Created new conn.json because there was no existing ' +
                'conn.json nor gossip.json');
            return;
        }
        if (!modernExists && legacyExists) {
            var legacyStateFile = AtomicFile(legacyPath);
            legacyStateFile.get(function (err, oldVals) {
                if (err) {
                    _this._loadedReject(err);
                    debug('Failed to load gossip.json, for creating conn.json');
                    return;
                }
                var newVals = migration_1.migrateMany(oldVals);
                return _this._stateFile.set(newVals, function (err2) {
                    if (err2) {
                        _this._loadedReject(err2);
                        debug('Failed to create conn.json from an existing gossip.json');
                        return;
                    }
                    debug('Migrated gossip.json into conn.json');
                    _this._load(newVals);
                });
            });
            return;
        }
        if (modernExists) {
            this._stateFile.get(function (err, vals) {
                if (err) {
                    _this._loadedReject(err);
                    debug('Failed to load conn.json');
                    return;
                }
                _this._load(vals);
            });
        }
    };
    ConnDB.prototype._load = function (vals) {
        var e_1, _a;
        var keys = Object.keys(vals);
        try {
            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                this._map.set(key, vals[key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this._loadedResolve(true);
        debug('Loaded conn.json into ConnDB in memory');
    };
    ConnDB.prototype._serialize = function () {
        var e_2, _a;
        var record = {};
        try {
            for (var _b = __values(this._map.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), address = _d[0], data = _d[1];
                record[address] = data;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return record;
    };
    ConnDB.prototype._write = function (cb) {
        debug('Begun serializing and writing ConnDB into conn.json');
        var record = this._serialize();
        this._stateFile.set(record, function (err) {
            if (!err)
                debug('Done serializing and writing ConnDB into conn.json');
            if (cb)
                cb(err);
        });
    };
    ConnDB.prototype._cancelScheduleWrite = function () {
        if (this._scheduledWriteTask) {
            clearTimeout(this._scheduledWriteTask);
        }
    };
    ConnDB.prototype._scheduleWrite = function () {
        var _this = this;
        this._cancelScheduleWrite();
        this._scheduledWriteTask = setTimeout(function () {
            _this._write(function (_err) {
                _this._scheduledWriteTask = null;
            });
        }, this._writeTimeout);
    };
    ConnDB.prototype._assertNotClosed = function () {
        if (this._closed) {
            throw new Error('This ConnDB instance is closed, create a new one.');
        }
    };
    ConnDB.prototype._assertValidAddress = function (address) {
        if (!msAddress.check(address)) {
            throw new Error('The given address is not a valid multiserver-address');
        }
    };
    ConnDB.prototype._assertValidData = function (data) {
        if (!data || typeof data !== 'object') {
            throw new Error('The given connection data should have been an object');
        }
    };
    ConnDB.prototype.replace = function (address, data) {
        this._assertNotClosed();
        this._assertValidAddress(address);
        this._assertValidData(data);
        var existed = this._map.has(address);
        if (existed) {
            var birth = this._map.get(address).birth;
            this._map.set(address, __assign({ birth: birth || Date.now() }, data));
            this._notify({ type: 'update', address: address });
        }
        else {
            this._map.set(address, __assign({ birth: Date.now() }, data));
            this._notify({ type: 'insert', address: address });
        }
        this._scheduleWrite();
        return this;
    };
    ConnDB.prototype.set = function (address, data) {
        this._assertNotClosed();
        this._assertValidAddress(address);
        this._assertValidData(data);
        var existed = this._map.has(address);
        if (existed) {
            var previous = this._map.get(address);
            this._map.set(address, __assign({ birth: previous.birth || Date.now() }, previous, data));
            this._notify({ type: 'update', address: address });
        }
        else {
            this._map.set(address, __assign({ birth: Date.now() }, data));
            this._notify({ type: 'insert', address: address });
        }
        this._scheduleWrite();
        return this;
    };
    ConnDB.prototype.update = function (address, x) {
        this._assertNotClosed();
        this._assertValidAddress(address);
        if (!x || (typeof x !== 'object' && typeof x !== 'function')) {
            throw new Error('update() expects an object or a function');
        }
        var existed = this._map.has(address);
        if (!existed)
            return this;
        var previous = this._map.get(address);
        var next = typeof x === 'function' ? x(previous) : x;
        this._map.set(address, __assign({ birth: previous.birth || Date.now() }, previous, next));
        this._notify({ type: 'update', address: address });
        this._scheduleWrite();
        return this;
    };
    ConnDB.prototype.get = function (address) {
        this._assertNotClosed();
        return this._map.get(address);
    };
    ConnDB.prototype.getAddressForId = function (id) {
        var e_3, _a;
        this._assertNotClosed();
        try {
            for (var _b = __values(this._map.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), address = _d[0], data = _d[1];
                if (data.key === id)
                    return address;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return undefined;
    };
    ConnDB.prototype.has = function (address) {
        this._assertNotClosed();
        return this._map.has(address);
    };
    ConnDB.prototype.delete = function (address) {
        this._assertNotClosed();
        var hasDeleted = this._map.delete(address);
        if (hasDeleted) {
            this._notify({ type: 'delete', address: address });
            this._scheduleWrite();
        }
        return hasDeleted;
    };
    ConnDB.prototype.entries = function () {
        this._assertNotClosed();
        return this._map.entries();
    };
    ConnDB.prototype.listen = function () {
        this._assertNotClosed();
        return this._notify.listen();
    };
    ConnDB.prototype.loaded = function () {
        this._assertNotClosed();
        return this._loadedPromise;
    };
    ConnDB.prototype.close = function () {
        this._cancelScheduleWrite();
        this._write();
        this._closed = true;
        this._map.clear();
        this._map = null;
        this._notify = null;
        this._stateFile = null;
        debug('Closed the ConnDB instance');
    };
    return ConnDB;
}());
module.exports = ConnDB;
