{
  "name": "ssb-keyring",
  "version": "2.2.0",
  "description": "",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+https://gitlab.com/ahau/ssb-keyring.git"
  },
  "keywords": [
    "scuttlebutt",
    "keys",
    "encryption"
  ],
  "author": "mixmix",
  "license": "LGPL-3.0",
  "bugs": {
    "url": "https://gitlab.com/ahau/ssb-keyring/issues"
  },
  "homepage": "https://gitlab.com/ahau/ssb-keyring#readme",
  "dependencies": {
    "charwise": "^3.0.1",
    "level": "^6.0.1",
    "mkdirp": "^1.0.4",
    "private-group-spec": "^1.1.3",
    "pull-level": "^2.0.4",
    "pull-stream": "^3.6.14",
    "ssb-private-group-keys": "^1.0.0",
    "ssb-ref": "^2.16.0",
    "ssb-uri2": "^2.4.0"
  },
  "devDependencies": {
    "sodium-universal": "^3.1.0",
    "ssb-bfe": "^3.7.0",
    "ssb-keys": "^8.4.1",
    "standard": "^17.0.0",
    "tap-arc": "^0.3.5",
    "tape": "^5.5.3"
  },
  "scripts": {
    "test": "npm run test:js && npm run test:only && npm run lint",
    "test:js": "tape 'test/**/*.test.js' | tap-arc",
    "test:only": "if grep -r --exclude-dir=node_modules --exclude-dir=.git --color 'test\\.only' ; then exit 1; fi",
    "lint": "standard --fix"
  },
  "readme": "# ssb-keyring\n\nA persistence store for encryption keys for scuttlebutt.\nIt's purpose is to make easy to answer box2 encryption/ decryption questions.\n\n_This module was extracted from `ssb-tribes`_\n\n## Usage\n\n```js\nconst keyRing = require('ssb-keyring')\nconst ssbKeys = require('ssb-keys')\n\nconst me = ssbKeys.generate()\n\nkeyRing(`/tmp/keyring-demo-${Date.now()}`, (err, keys) => {\n  keys.dm.addFromSSBKeys(me)\n\n  const trialKeys = keys.decryptionKeys(otherFeedId)\n\n  // ...use trialKeys with a decryption library\n})\n```\n\n## API\n\nThis module is responsible for:\n1. recording key details\n    - persisting encryption keys (async)\n    - persisting who has access to keys (async)\n2. accessing keys\n    - \"which keys should I try when decrypting a message from feed X?\"\n    - \"if I'm publishing a message to feed Y, and want to encrypt it to _these_ recps, which keys should I use?\"\n\nOverview (methods most people should use):\n\n```js\n/* SETUP */\nkeyRing(dbPath, cb)\n\n/* REGISTERING */\nkeys.dm.addFromSSBKeys(ssbKeys, cb)\nkeys.poBox.add(poBoxId, keyInfo, cb)\nkeys.group.add(groupId, keyInfo, cb)\n\n/* QUERYING */\nkeys.decryptionKeys(authorId)        // => [keyInfo]\nkeys.encryptionKeys(authorId, recps) // => [keyInfo]\n\nkeys.close(cb)\n```\n\nAll querying methods are synchronous, so that encryption / decryption\nnever has to wait for IO to access keys.\n\nAll registering methods are:\n- asynchronous\n    - if provided a callback `cb` will callback\n    - if not provided a callback, return a Promise\n- can be used synchronously\n    - all querying is done on an in-memory cache, which new items are added to\n    - the only asynchronous aspect is for persistence\n\n### `keyRing(path, cb)`\n\nwhere\n- `path` *String* to location your keys will be persisted to on disk\n- `cb` *function* calls back with `(err, keys)` (where `keys` is the key-ring API)\n    - if `cb` not provided, function returns a Promise\n\n---\n\n### `keys.dm.addFromSSBKeys(ssbKeys, cb)`\n\nTakes some signing keys `ssbKeys` (made by `ssb-keys` or similar),\nand adds them as keys you also use for encryption (by converting them from ed25519 to curve25519).\n\nAdds keys that a particular feed you can write to uses for DMs to others\n- `ssbKeys` *Object* containing ed25519 keys\n    - `ssbKeys.public` *String* base64 encoded public part of the DM key\n    - `ssbKeys.secret` | `ssbKeys.private` *String* base64 encoded secret/private part the DM keypair\n- `cb` *function* callback with signature `(err)`\n\nNOTE: this method establishes which feeds you author, which is relevant for:\n- knowing how to encrypt messages to another feed or P.O. Box\n- knowing when a message was authored by you - involves self-key encryption\n\n### `keys.dm.has(feedId) => Boolean`\n\nFind out whether a particular `feedId` has been registered.\nIf it has you can use it for encrypting to : self, other feedIds, P.O. Boxes\n\n`feedId` can be a classic sigil (for classic feeds) or an SSB-URI.\n\n### `keys.dm.get(feedId) => keyInfo`\n### `keys.dm.list() => [feedId]`\n\n\n---\n\n### `keys.self.set(keyInfo, cb)`\n\nYour keyring will always intialize and check if a self-key has been set.\nYou can use this method to over-ride that default.\n\n- `keyInfo` *Object* contains symmetric key\n    - `info.key` *String* base64 encoded symmetric key\n    - `info.scheme` *string* (optional)\n- `cb` *function* callback with signature `(err)`\n\n### `keys.self.get() => keyInfo`\n\n---\n\n### `keys.group.add(groupId, info, cb)`\n\nwhere\n- `groupId` *String* a cloaked messageId which identifies the group\n- `info` *Object*:\n    - `info.key` *Buffer* - the group encryption key\n    - `info.scheme` *String* - scheme of that encryption key (optional, there is only one option at the moment which we default to)\n    - `info.root` *MessageId* the id of the `group/init` message\n\n### `keys.group.has(groupId) => Boolean`\n### `keys.group.get(groupId) => keyInfo`\n### `keys.group.list() => [groupId]`\n\n---\n\n### `keys.poBox.add(poBoxId, info, cb)`\n\nwhere\n- `poBoxId` *String* is an SSB-URI for a P.O. Box\n- `info` *Object*\n    - `info.key` *Buffer* - the private part of a diffie-hellman key\n    - `info.scheme` *String* the scheme associated with that key (currently optional)\n\n### `keys.poBox.has(poBoxId) => Boolean`\n### `keys.poBox.get(poBoxId) => keyInfo`\n### `keys.poBox.list(poBoxId) => [poBoxId]`\n\n\n### `keys.decryptionKeys(authorId) => trialKeys`\n\nFind the keys you could use to try decrypting a message from `authorId`, where:\n- `authorId` *String* a feedId (either sigil or URI based)\n- `trialKeys` *Object* where:\n    - `trialKeys.self` *Array* collection of self keyInfo (empty Array if authorId is not yours)\n    - `trialKeys.group` *Array* collection of keyInfo for Private Groups\n    - `trialKeys.dm` *Array* collection of DM keyInfo (empty Array if authorId is yours)\n    - `trialKeys.poBox` *Array* collection of P.O. Box keyInfo\n\n### `keys.encryptionKeys(authorId, recps) => [keyInfo]`\n\nMap an array of recipients to keyInfo used to encrypt messages to those recipients, where:\n- `authorId` *String* the id of the feed you're going to publish the message to (in sigil/ URI form)\n- `recps` *Array* collection of recipients (feedId, groupId, poBoxId in sigil/ URI form)\n\nNOTE:\n1. if matching keyInfo cannot be found/ computed, no error is thrown\n    - instead then that keyInfo will come back `null`\n2. it is possible for duplicated of the same keyInfo to come back\n    - e.g. if you put two `feedId` in recps which are both yours, then these will return the same self-key\n    - this module does not de-duplicate keys\n\n---\n\n### `keys.close(cb)`\n\nCloses the keyring database\n\n\n---\n\n## Questions\n\n1. what do if `encryptionKeys(recps)` fails?\n    - can fail if authorId is unknown, or if don't have a keyInfo for e.g. a group\n    - options:\n        - throw Error\n        - return null \n        - **return [keyInfo, null, keyInfo]** << âœ“ this one currently\n           - relies on boxer to catch this\n2. API is not really ready till you have recorded your DM + Own keys...\n    - this is a footgun?\n    - do some method error?\n3. can we associate a PO Box with the lobby of a particular group?\n    - want to be able to get a PO Box key and know what to re-index (minimally)\n    - or do we just try the key on _everything_?\n4. how does encryption/ decryption across meta-feeds\n    - A chess app has a meta-feed with DMs for chess chat, are the recps:\n        - [@chessFeedA, @chessFeedB]\n        - [@rootFeedA, @rootFeedB]\n\n## Future ideas\n\n- track membership\n- support having more than on self/ own key\n- add \"processors\" for group messages:\n    - `group/init`\n    - `group/add-member`\n- `keys.dm.add(feedId, dhKeys, cb)`\n    - would allow signKeys !== encryptionKeys\n    - the current scheme = 'envelope-id-based-dm-converted-ed25519' so we can't make add available unless it's another scheme??\n- version the db (by filename)\n\n\n"
}