{
  "name": "ssb-bfe-spec",
  "description": "Binary Field Encodings (BFE) spec for Secure Scuttlebutt (SSB)",
  "version": "0.8.0",
  "homepage": "https://github.com/ssbc/ssb-bfe-spec",
  "repository": {
    "type": "git",
    "url": "git://github.com/ssbc/ssb-bfe-spec.git"
  },
  "main": "bfe.json",
  "files": [
    "bfe.json"
  ],
  "author": "public-domain",
  "contributors": [
    "Anders Rune Jensen <arj03@protonmail.ch>",
    "Andre Staltz <contact@staltz.com>",
    "Mix Irving <mix@protozoa.nz>"
  ],
  "license": "CC0-1.0",
  "devDependencies": {
    "tap-spec": "^5.0.0",
    "tape": "^5.3.1"
  },
  "scripts": {
    "test": "tape *.test.js | tap-spec"
  },
  "readme": "<!--\nSPDX-FileCopyrightText: 2021 Anders Rune Jensen\n\nSPDX-License-Identifier: CC0-1.0\n-->\n\n# SSB Binary Field Encodings Specification\n\nShortname: `ssb-bfe-spec`\n\nDefinition of binary encodings for common types such as message IDs and feed IDs\nto be used in binary feed formats.\n\nThe binary encoding is defined as the concatenation of three parts, often known\nas **T-F-D**:\n\n- The `type` of thing as a UInt8 byte\n- The `format` of the `type` as a UInt8 byte\n- The `data` as a sequence of UInt8 bytes\n\n## Types\n\n | Type code   | Referencing        | In `bfe.json`    |\n |:-----------:| ------------------ | ---------------- |\n | 0           | Feed ID            | `feed`           |\n | 1           | Message ID         | `message`        |\n | 2           | Blob ID            | `blob`           |\n | 3           | Encryption key     | `encryption-key` |\n | 4           | Signature          | `signature`      |\n | 5           | Encrypted data     | `encrypted`      |\n | 6           | Generic data       | `generic`        |\n | 7           | Identity           | `identity`       |\n\n### 0. Feed ID formats\n\nA feed ID TFD represents the public portion of a cryptographic keypair used to\nidentify a feed, and verify message signatures.\n\n| Type code | Format code | Data length | Specification      | In `bfe.json`   |\n|:---------:|:-----------:|-------------|--------------------|-----------------|\n| 0         | 0           | 32 bytes    | [Classic SSB Feed] | `classic`       |\n| 0         | 1           | 32 bytes    | [Gabby Grove]      | `gabbygrove-v1` |\n| 0         | 2           | 32 bytes    | [Bamboo]           | `bamboo`        |\n| 0         | 3           | 32 bytes    | [Bendy Butt]       | `bendybutt-v1`  |\n| 0         | 4           | 32 bytes    | [Buttwoo]          | `buttwoo-v1`    |\n| 0         | 5           | 32 bytes    | [Index feed]       | `indexed-v1`    |\n\n#### Example\n\nGiven a sigil-based string encoding of a classic SSB feed:\n\n```\n  @6CAxOI3f+LUOVrbAl0IemqiS7ATpQvr9Mdw9LC4+Uv0=.ed25519\n  │└─────────────────────┬────────────────────┘└───┬──┘\n sigil           base64 encoded data            suffix\n```\n\nIts BFE encoding is the following bytes displayed in hexadecimal:\n\n```\n  00 00 e8 20 31 38 8d df f8 b5 0e 56 b6 c0 97 42 1e 9a a8 92 ec 04 e9 42 fa fd 31 dc 3d 2c 2e 3e 52 fd\n   │  │ └────────────────────┬────────────────────────────────────────────────────────────────────────┘\ntype  │                    data\n     format\n```\n\n### 1. Message ID formats\n\nA message ID TFD represents the hash that uniquely identifies a message\npublished on a feed. Some message ID formats directly reference the hash\nalgorithm utilized, while others leave it implicit in the specification.\n\n| Type code | Format code | Data length | Specification     | In `bfe.json`   |\n|:---------:|:-----------:|-------------|-------------------|-----------------|\n| 1         | 0           | 32 bytes    | [Classic SSB Msg] | `classic`       |\n| 1         | 1           | 32 bytes    | [Gabby Grove]     | `gabbygrove-v1` |\n| 1         | 2           | 32 bytes    | [Private Group]   | `cloaked`       |\n| 1         | 3           | 64 bytes    | [Bamboo]          | `bamboo`        |\n| 1         | 4           | 32 bytes    | [Bendy Butt]      | `bendybutt-v1`  |\n| 1         | 5           | 32 bytes    | [Buttwoo]         | `buttwoo-v1`    |\n| 1         | 6           | 32 bytes    | [Index feed]      | `indexed-v1`    |\n\n#### Example\n\nGiven a sigil-based string encoding of a classic SSB message ID:\n\n```\n  %R8heq/tQoxEIPkWf0Kxn1nCm/CsxG2CDpUYnAvdbXY8=.sha256\n  │└─────────────────────┬────────────────────┘└──┬──┘\n sigil           base64 encoded data            suffix\n```\n\nIts BFE encoding is the following bytes displayed in hexadecimal:\n\n```\n  01 00 47 c8 5e ab fb 50 a3 11 08 3e 45 9f d0 ac 67 d6 70 a6 fc 2b 31 1b 60 83 a5 46 27 02 f7 5b 5d 8f\n   │  │ └────────────────────┬────────────────────────────────────────────────────────────────────────┘\ntype  │                    data\n     format\n```\n\n### 2. Blob ID formats\n\nA blob ID TFD represents the hash that uniquely identifies the blob.\n\n| Type code | Format code | Data length | Specification      | In `bfe.json` |\n|:---------:|:-----------:|-------------|--------------------|---------------|\n| 2         | 0           | 32 bytes    | [Classic SSB Blob] | `classic`     |\n\n#### Example\n\nGiven a sigil-based string encoding of a classic SSB blob ID:\n\n```\n  &S7+CwHM6dZ9si5Vn4ftpk/l/ldbRMqzzJos+spZbWf4=.sha256\n  │└─────────────────────┬────────────────────┘└───┬─┘\n sigil           base64 encoded data            suffix\n```\n\nIts BFE encoding is the following bytes displayed in hexadecimal:\n\n```\n  02 00 4b bf 82 c0 73 3a 75 9f 6c 8b 95 67 e1 fb 69 93 f9 7f 95 d6 d1 32 ac f3 26 8b 3e b2 96 5b 59 fe\n   │  │ └────────────────────┬────────────────────────────────────────────────────────────────────────┘\ntype  │                    data\n     format\n```\n\n### 3. Encryption Key formats\n\nKeys used for encryption\n\n| Type code | Format code | Data length | Specification          | In `bfe.json`   |\n|:---------:|:-----------:|-------------|------------------------|-----------------|\n| 3         | 0           | 32 bytes    | [Private Group DM]     | `box2-dm-dh`    |\n| 3         | 1           | 32 bytes    | [Private Group PO box] | `box2-pobox-dh` |\n\n\n### 4. Signature formats\n\n| Type code | Format code | Data length | Specification           | In `bfe.json` |\n|:---------:|:-----------:|-------------|-------------------------|---------------|\n| 4         | 0           | 64 bytes    | [Classic SSB Signature] | `msg-ed25519` |\n\n\n#### Example\n\nGiven a base64 string encoding of a Classic SSB ed25519 signature:\n\n```\n  nkY4Wsn9feosxvX7bpLK7OxjdSrw6gSL8sun1n2TMLXKySYK9L5itVQnV2nQUctFsrUOa2istD2vDk1B0uAMBQ==.sig.ed25519\n  └─────────────────────────────────────┬────────────────────────────────────────────────┘└────┬─────┘\n                             base64 encoded signature                                        suffix\n```\n\nIts BFE encoding is the following bytes displayed in hexadecimal:\n\n```\n  04 00 9e 46 38 5a c9 fd 7d ea 2c c6 f5 fb 6e 92 ca ec ec 63 75 2a f0 ea 04 8b f2 cb a7 d6 7d 93 30 b5 ca c9 26 0a f4 be 62 b5 54 27 57 69 d0 51 cb 45 b2 b5 0e 6b 68 ac b4 3d af 0e 4d 41 d2 e0 0c 05\n   │  │ └────────────────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\ntype  │                    data\n     format\n```\n\n### 5. Encrypted data formats\n\nWhen content is encrypted (in other words, \"boxed\") in SSB, it is provided as\nuninterpretable bytes, plus a tag that identifies which algorithm was used for\nencrypting it, such as `box` or `box2`.\n\n| Type code | Format code | Data length | Specification   | In `bfe.json` |\n|:---------:|:-----------:|-------------|-----------------|---------------|\n| 5         | 0           | Arbitrary   | [Private Box]   | `box1`        |\n| 5         | 1           | Arbitrary   | [Private Group] | `box2`        |\n\n### 6. Generic data formats\n\nBFE supports encoding data types with no semantics attached to them. They are\nmerely categorized into formats that represent their data type.\n\n| Type code | Format code | Data length | Specification         | In `bfe.json` |\n|:---------:|:-----------:|-------------|-----------------------|---------------|\n| 6         | 0           | Arbitrary   | [UTF8] String         | `string-UTF8` |\n| 6         | 1           | 1 byte      | Boolean: data byte is 0 for False, 1 for True | `boolean` |\n| 6         | 2           | 0 bytes     | [Null pointer]        | `nil`         |\n| 6         | 3           | Arbitrary   | Any sequence of bytes | `any-bytes`   |\n\n\n### 7. Identity formats\n\nIdentities are distinct from feedIds in that they are not a key bound to a single feed/ device,\nand they are never used for signing of messages.\n\n| Type code | Format code | Data length | Specification         | In `bfe.json` |\n|:---------:|:-----------:|-------------|-----------------------|---------------|\n| 7         | 0           | 32          | [Private Group PO box] | `po-box`     |\n| 7         | 1           | 32          | [Private Group] | `group`     |\n\n\n[TFK]: https://github.com/ssbc/envelope-spec/blob/master/encoding/tfk.md\n[Classic SSB Feed]: https://ssbc.github.io/scuttlebutt-protocol-guide/#keys-and-identities\n[Classic SSB Msg]: https://ssbc.github.io/scuttlebutt-protocol-guide/#message-format\n[Classic SSB Blob]: https://ssbc.github.io/scuttlebutt-protocol-guide/#blobs\n[Classic SSB Signature]: https://ssbc.github.io/scuttlebutt-protocol-guide/#signature\n[Gabby Grove]: https://github.com/ssbc/ssb-spec-drafts/tree/master/drafts/draft-ssb-core-gabbygrove/00\n[Bamboo]: https://github.com/AljoschaMeyer/bamboo\n[Private Group]: https://github.com/ssbc/private-group-spec/tree/master/encryption\n[Private Group DM]: https://github.com/ssbc/private-group-spec/tree/master/direct-messages\n[Private Group PO box]: https://github.com/ssbc/private-group-spec/tree/master/po-box\n[Bendy Butt]: https://github.com/ssb-ngi-pointer/bendy-butt-spec\n[Buttwoo]: https://github.com/ssbc/ssb-buttwoo-spec/\n[Private Box]: https://ssbc.github.io/scuttlebutt-protocol-guide/#private-messages\n[Envelope Spec]: https://github.com/ssbc/envelope-spec\n[Null pointer]: https://en.wikipedia.org/wiki/Null_pointer\n[UTF8]: https://datatracker.ietf.org/doc/html/rfc3629\n[Fusion Identity]: https://github.com/ssb-ngi-pointer/fusion-identity-spec/\n[Bencode]: https://en.wikipedia.org/wiki/Bencode\n[Index feed]: https://github.com/ssbc/ssb-secure-partial-replication-spec#version-1\n"
}